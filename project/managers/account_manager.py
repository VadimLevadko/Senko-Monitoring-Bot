import os
import json
import shutil
import logging
import asyncio
from telethon import TelegramClient
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import InputPeerEmpty
from typing import Tuple, Optional, List, Dict
from datetime import datetime
from ..config import BOTS_FOLDER

logger = logging.getLogger(__name__)

class AccountManager:
    def __init__(self, bots_folder: str, proxy_manager=None):
        if not proxy_manager:
            raise ValueError("ProxyManager –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            
        self.bots_folder = bots_folder
        self.proxy_manager = proxy_manager
        self.logger = logging.getLogger(__name__)
        self.locks = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        self.monitoring_clients = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        os.makedirs(self.bots_folder, exist_ok=True)

    async def import_account(self, session_path: str, json_path: str) -> Tuple[bool, str]:
        """–ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        client = None
        used_proxy = None
        try:
            self.logger.info(f"–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞. Session: {session_path}, JSON: {json_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
            if not os.path.exists(session_path):
                self.logger.error(f"–§–∞–π–ª session –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_path}")
                return False, "Session —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            if not os.path.exists(json_path):
                self.logger.error(f"–§–∞–π–ª JSON –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
                return False, "JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            try:
                with open(json_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    self.logger.info(f"JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {json.dumps(config, indent=2)}")
            except json.JSONDecodeError as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON —Ñ–∞–π–ª–∞"
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
                return False, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞"

            # –ü–æ–ª—É—á–∞–µ–º api_id –∏ api_hash
            api_id = config.get('app_id') or config.get('api_id')
            api_hash = config.get('app_hash') or config.get('api_hash')
            
            if not api_id or not api_hash:
                self.logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ JSON")
                return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç api_id/api_hash –≤ JSON —Ñ–∞–π–ª–µ"

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
            proxy = await self.proxy_manager.reserve_proxy()
            if not proxy:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
                return False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"
                
            used_proxy = proxy
            self.logger.info(f"–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏: {proxy}")

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            client = TelegramClient(
                session_path,
                api_id,
                api_hash,
                proxy=proxy,
                device_model=config.get('device', 'Desktop'),
                system_version=config.get('sdk', 'Windows 10'),
                app_version=config.get('app_version', '1.0'),
                lang_code=config.get('lang_code', 'ru')
            )

            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
            try:
                self.logger.info("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
                await client.connect()
                
                if not await client.is_user_authorized():
                    self.logger.error("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"

                me = await client.get_me()
                if not me:
                    self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"

                self.logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {me.phone}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
                phone = str(me.phone)
                account_folder = os.path.join(self.bots_folder, phone)
                os.makedirs(account_folder, exist_ok=True)

                self.logger.info(f"–ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ {account_folder}")
                
                shutil.copy2(session_path, os.path.join(account_folder, f"{phone}.session"))
                
                config.update({
                    'phone': phone,
                    'username': me.username,
                    'first_name': me.first_name,
                    'last_name': me.last_name,
                    'last_check_time': int(datetime.now().timestamp())
                })
                
                with open(os.path.join(account_folder, f"{phone}.json"), 'w', encoding='utf-8') as f:
                    json.dump(config, f, indent=4, ensure_ascii=False)
                    
                with open(os.path.join(account_folder, "proxy.json"), 'w', encoding='utf-8') as f:
                    json.dump(proxy, f, indent=4, ensure_ascii=False)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                proxy_string = f"{proxy['addr']}:{proxy['port']}:{proxy['username']}:{proxy['password']}"
                
                # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∫—Å–∏
                with open(self.proxy_manager.proxy_file, 'r') as f:
                    proxies = f.readlines()
                
                with open(self.proxy_manager.proxy_file, 'w') as f:
                    for p in proxies:
                        if p.strip() != proxy_string:
                            f.write(p)

                self.logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–∫—Å–∏ {proxy_string} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
                return True, f"–ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω"

            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
                return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}"

        finally:
            if client:
                try:
                    await client.disconnect()
                except:
                    pass

    async def create_client(self, phone: str) -> Optional[TelegramClient]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram"""
        try:
            account_folder = os.path.join(self.bots_folder, phone)
            self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone} –≤ –ø–∞–ø–∫–µ {account_folder}")

            json_file = os.path.join(account_folder, f"{phone}.json")
            proxy_file = os.path.join(account_folder, "proxy.json")
            session_path = os.path.join(account_folder, f"{phone}.session")

            if not os.path.exists(json_file):
                self.logger.error(f"‚ùå JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file}")
                return None
            if not os.path.exists(proxy_file):
                self.logger.error(f"‚ùå Proxy —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {proxy_file}")
                return None
            if not os.path.exists(session_path):
                self.logger.error(f"‚ùå Session —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_path}")
                return None

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open(json_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
                # –í—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥ –±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                safe_config = config.copy()
                if 'app_hash' in safe_config:
                    safe_config['app_hash'] = safe_config['app_hash'][:8] + '...'
                self.logger.info(f"üì± –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}: {json.dumps(safe_config, indent=2, ensure_ascii=False)}")

            with open(proxy_file, 'r', encoding='utf-8') as f:
                proxy = json.load(f)
                safe_proxy = proxy.copy()
                if 'password' in safe_proxy:
                    safe_proxy['password'] = '***'
                self.logger.info(f"üîí –ü—Ä–æ–∫—Å–∏ –¥–ª—è {phone}: {json.dumps(safe_proxy, indent=2, ensure_ascii=False)}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º api_id –∏ api_hash
            api_id = config.get('app_id') or config.get('api_id')
            api_hash = config.get('app_hash') or config.get('api_hash')

            if not api_id or not api_hash:
                self.logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç api_id –∏–ª–∏ api_hash –¥–ª—è {phone}")
                return None

            self.logger.info(f"‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {phone}")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            self.logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telethon –¥–ª—è {phone}")
            client = TelegramClient(
                session_path,
                int(api_id),
                api_hash,
                proxy=proxy,
                device_model=config.get('device', 'Desktop'),
                system_version=config.get('sdk', 'Windows 10'),
                app_version=config.get('app_version', '1.0'),
                lang_code=config.get('lang_code', 'ru'),
                connection_retries=3
            )

            try:
                self.logger.info(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {phone}...")
                await client.connect()
                self.logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {phone}")

                if not await client.is_user_authorized():
                    self.logger.error(f"‚ùå –ö–ª–∏–µ–Ω—Ç {phone} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Å—Å–∏–µ–π.")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º session —Ñ–∞–π–ª
                    session_size = os.path.getsize(session_path)
                    self.logger.info(f"üìä –†–∞–∑–º–µ—Ä session —Ñ–∞–π–ª–∞: {session_size} –±–∞–π—Ç")
                    await client.disconnect()
                    return None

                me = await client.get_me()
                if not me:
                    self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {phone}")
                    await client.disconnect()
                    return None

                self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {phone}: username={me.username}, phone={me.phone}")
                return client

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ {phone}: {str(e)}")
                if client.is_connected():
                    await client.disconnect()
                return None

        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {phone}: {str(e)}")
            return None

    async def delete_account(self, phone: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account_folder = os.path.join(self.bots_folder, phone)
            if os.path.exists(account_folder):
                # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if phone in self.monitoring_clients:
                    client = self.monitoring_clients[phone]
                    try:
                        if client.is_connected():
                            await client.disconnect()
                    except:
                        pass
                    self.monitoring_clients.pop(phone)

                # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–∞–º–∏
                shutil.rmtree(account_folder)
                self.logger.info(f"–£–¥–∞–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç {phone}")
                return True
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}: {e}")
            return False

    async def check_account(self, phone: str) -> Tuple[bool, str]:
        client = None
        try:
            client = await self.create_client(phone)
            if not client:
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç ‚ö†Ô∏è"

            try:
                me = await client.get_me()
                if not me:
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ‚ö†Ô∏è"

                name = f"{me.first_name} {me.last_name if me.last_name else ''}"

                try:
                    await client(GetDialogsRequest(
                        offset_date=None,
                        offset_id=0,
                        offset_peer=InputPeerEmpty(),
                        limit=1,
                        hash=0
                    ))
                    return True, f"–û–Ω–ª–∞–π–Ω üü¢ - {name.strip()}"
                except Exception as e:
                    error_msg = str(e)
                    if "USER_DEACTIVATED" in error_msg:
                        return False, f"–ë–∞–Ω üî¥ - {name.strip()}"
                    if "FLOOD_WAIT" in error_msg:
                        return False, f"–§–ª—É–¥ üü° - {name.strip()}"
                    return False, f"–û—à–∏–±–∫–∞: {error_msg} ‚ö†Ô∏è"

            except Exception as e:
                return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)} ‚ö†Ô∏è"

        finally:
            if client:
                try:
                    await client.disconnect()
                except:
                    pass

    def get_accounts(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            accounts = []
            for item in os.listdir(self.bots_folder):
                folder_path = os.path.join(self.bots_folder, item)
                if os.path.isdir(folder_path):
                    json_path = os.path.join(folder_path, f"{item}.json")
                    session_path = os.path.join(folder_path, f"{item}.session")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
                    if os.path.exists(json_path) and os.path.exists(session_path):
                        accounts.append(item)
            return accounts
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return []
            
    async def disconnect_all(self) -> None:
        try:
            accounts = self.get_accounts()
            for phone in accounts:
                try:
                    client = self.monitoring_clients.get(phone)
                    if client:
                        try:
                            if client.is_connected():
                                await client.disconnect()
                                self.logger.info(f"–û—Ç–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç {phone}")
                        except Exception as e:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {phone}: {e}")
                        finally:
                            self.monitoring_clients.pop(phone, None)
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}: {e}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        finally:
            self.monitoring_clients.clear()

    def get_account_info(self, phone: str) -> Optional[Dict]:
        try:
            json_path = os.path.join(self.bots_folder, phone, f"{phone}.json")
            if os.path.exists(json_path):
                with open(json_path, 'r', encoding='utf-8') as f:
                    info = json.load(f)
                    if 'app_hash' in info:
                        info['app_hash'] = info['app_hash'][:8] + '...'
                    if 'api_hash' in info:
                        info['api_hash'] = info['api_hash'][:8] + '...'
                    return info
            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ {phone}: {e}")
            return None

    async def update_account_proxy(self, phone: str, new_proxy: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            proxy_path = os.path.join(self.bots_folder, phone, "proxy.json")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–∫—Å–∏
            with open(proxy_path, 'w', encoding='utf-8') as f:
                json.dump(new_proxy, f, indent=4)

            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –Ω–æ–≤–æ–π –ø—Ä–æ–∫—Å–∏
            if phone in self.monitoring_clients:
                old_client = self.monitoring_clients[phone]
                try:
                    if old_client.is_connected():
                        await old_client.disconnect()
                except:
                    pass
                self.monitoring_clients.pop(phone)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            new_client = await self.create_client(phone)
            if new_client:
                self.monitoring_clients[phone] = new_client
                self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}")
                return True

            return False

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}: {e}")
            return False

    def get_active_clients_count(self) -> int:
        return len(self.monitoring_clients)

    async def check_all_accounts(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        results = {}
        try:
            accounts = self.get_accounts()
            for phone in accounts:
                is_working, status = await self.check_account(phone)
                results[phone] = is_working
                self.logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {phone}: {'—Ä–∞–±–æ—Ç–∞–µ—Ç' if is_working else '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'} ({status})")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        return results

    async def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
        try:
            accounts = self.get_accounts()
            active_accounts = 0
            total_accounts = len(accounts)
            
            for phone in accounts:
                if phone in self.monitoring_clients:
                    client = self.monitoring_clients[phone]
                    try:
                        if client.is_connected() and await client.is_user_authorized():
                            active_accounts += 1
                    except:
                        pass

            return {
                'total_accounts': total_accounts,
                'active_accounts': active_accounts,
                'inactive_accounts': total_accounts - active_accounts,
                'active_percentage': round((active_accounts / total_accounts * 100) if total_accounts > 0 else 0, 2)
            }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return {
                'total_accounts': 0,
                'active_accounts': 0,
                'inactive_accounts': 0,
                'active_percentage': 0
            }

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
            await self.disconnect_all()

            self.monitoring_clients.clear()
            self.locks.clear()
            self.logger.info("–†–µ—Å—É—Ä—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")