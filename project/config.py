import os
import json
import logging
import logging.config
from pathlib import Path
from typing import Dict, List

logger = logging.getLogger(__name__)

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
DATA_DIR = os.path.join(BASE_DIR, 'data')
TEMP_DIR = os.path.join(BASE_DIR, 'temp')

for directory in [LOGS_DIR, DATA_DIR, TEMP_DIR]:
    os.makedirs(directory, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "7777476078:AAEO6JXwVC3uWQSYy1LNUcDKS9lcGYX5Nh8"
SUPER_ADMIN_USERNAME = "VL7940"  # –¢–æ–ª—å–∫–æ username —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞


BOTS_FOLDER = os.path.join(BASE_DIR, '–ë–û–¢–´')
ACCOUNTS_FILE = os.path.join(DATA_DIR, 'accounts.json')
PROXY_FILE = os.path.join(DATA_DIR, 'proxy.txt')
KEYWORDS_FILE = os.path.join(DATA_DIR, 'keywords.json')
SETTINGS_FILE = os.path.join(DATA_DIR, 'settings.json')
DATABASE_FILE = os.path.join(DATA_DIR, 'monitor.db')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_MONITORING_SETTINGS = {
    'check_interval': 1,
    'max_message_length': 4096,
    'max_channels_per_client': 500,
    'max_keywords': 1000,
    'notification_chunk_size': 50,
    'retry_interval': 300,
    'cleanup_interval': 86400,
    'data_retention_days': 30,
    'auto_restart': True,
    'restart_delay': 60,
    'max_errors_before_restart': 5,
    'message_processing_timeout': 30,
    'join_timeout': 30,
    'flood_wait_threshold': 60,
    'join_channel_delay': 5,
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
STATES = {
    'MAIN_MENU': 0,
    'MANAGING_ACCOUNTS': 1,
    'MANAGING_PROXIES': 2,
    'MANAGING_KEYWORDS': 3,
    'MONITORING': 4,
    'SETTINGS': 5,
    'SETTINGS_MENU': 6,
    'EDITING_NOTIFICATIONS': 7,
    'EDITING_PERFORMANCE': 8,
    'EDITING_AUTORESTART': 9,
    'EDITING_STORAGE': 10,
    'ENTERING_VALUE': 11,
    'ADDING_ACCOUNT': 20,
    'ADDING_PROXY': 21,
    'ADDING_KEYWORD': 22,
    'ADDING_CHANNEL': 23,
    'MANAGING_ADMINS': 50,
    'ADDING_ADMIN': 51,
    'REMOVING_ADMIN': 52,
    'IMPORTING_KEYWORDS': 30,
    'EXPORTING_KEYWORDS': 31,
    'CONFIRMING_DELETE': 40,
    'CONFIRMING_CLEAR': 41,
    'MANAGING_CHANNELS': 43,
    'CONFIRMING_SETTINGS': 42,
    'EDITING_TIMEOUTS': 44,
    'EDITING_OTHER': 45,
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
PROXY_SETTINGS = {
    'check_timeout': 10,
    'max_retries': 3,
    'retry_delay': 5,
    'rotation_interval': 3600,
    'min_valid_proxies': 5,
    'check_interval': 300,
    'max_simultaneous_checks': 10,
    'banned_timeout': 3600,
}

# –õ–∏–º–∏—Ç—ã
LIMITS = {
    'max_accounts': 100,
    'max_channels': 1000,
    'max_keywords_per_import': 1000,
    'max_file_size': 10 * 1024 * 1024,  # 10 MB
    'max_concurrent_tasks': 10,
    'max_message_rate': 30,
    'max_keyword_length': 100,
    'min_keyword_length': 3,
    'max_notifications_per_minute': 60,
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telethon
TELETHON_SETTINGS = {
    'connection_retries': 5,
    'retry_delay': 1,
    'auto_reconnect': True,
    'request_retries': 3,
    'flood_sleep_threshold': 60,
    'device_model': 'Desktop',
    'system_version': 'Windows 10',
    'app_version': '1.0.0',
    'lang_code': 'ru',
    'system_lang_code': 'ru'
}

# –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGE_TEMPLATES = {
    'keyword_found': (
        "üîç *–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!*\n\n"
        "üì± *–ì—Ä—É–ø–ø–∞:* `{chat_title}`\n"
        "üë§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* `{sender}`\n"
        "üîë *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:* `{keywords}`\n\n"
        "üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n"
        "`{message}`\n\n"
        "üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]({message_link})\n"
        "‚è∞ –í—Ä–µ–º—è: `{time}`"
    ),
    'error_notification': (
        "‚ùå *–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*\n\n"
        "–¢–∏–ø: `{error_type}`\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ: `{description}`\n"
        "–í—Ä–µ–º—è: `{time}`"
    ),
    'proxy_error': (
        "üî¥ *–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏*\n\n"
        "–ü—Ä–æ–∫—Å–∏: `{proxy}`\n"
        "–û—à–∏–±–∫–∞: `{error}`\n"
        "–í—Ä–µ–º—è: `{time}`"
    ),
    'account_banned': (
        "üö´ *–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*\n\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: `{phone}`\n"
        "–ü—Ä–∏—á–∏–Ω–∞: `{reason}`\n"
        "–í—Ä–µ–º—è: `{time}`"
    ),
    'channel_added': (
        "‚úÖ *–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω*\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ: `{title}`\n"
        "ID: `{chat_id}`\n"
        "–í—Ä–µ–º—è: `{time}`"
    ),
    'channel_removed': (
        "‚ùå *–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω*\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ: `{title}`\n"
        "ID: `{chat_id}`\n"
        "–í—Ä–µ–º—è: `{time}`"
    ),
    'monitoring_started': (
        "‚ñ∂Ô∏è *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω*\n\n"
        "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: `{clients_count}`\n"
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: `{channels_count}`\n"
        "–í—Ä–µ–º—è: `{time}`"
    ),
    'monitoring_stopped': (
        "‚èπ *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n"
        "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: `{duration}`\n"
        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: `{messages_count}`\n"
        "–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: `{keywords_found}`\n"
        "–í—Ä–µ–º—è: `{time}`"
    ),
    'settings_changed': (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã*\n\n"
        "–ü–∞—Ä–∞–º–µ—Ç—Ä: `{setting_name}`\n"
        "–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `{new_value}`\n"
        "–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `{old_value}`\n"
        "–í—Ä–µ–º—è: `{time}`"
    ),
    'status_update': (
        "üìä *–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*\n\n"
        "–°–æ—Å—Ç–æ—è–Ω–∏–µ: `{status}`\n"
        "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: `{clients_count}`\n"
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: `{channels_count}`\n"
        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: `{messages_count}`\n"
        "–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: `{keywords_found}`\n"
        "–û—à–∏–±–æ–∫: `{errors_count}`\n"
        "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: `{uptime}`"
    ),
    'error_report': (
        "‚ö†Ô∏è *–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ*\n\n"
        "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: `{component}`\n"
        "–û—à–∏–±–∫–∞: `{error}`\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ: `{description}`\n"
        "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: ```\n{traceback}```\n"
        "–í—Ä–µ–º—è: `{time}`"
    )
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOGGING_CONFIG = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        },
        'detailed': {
            'format': '%(asctime)s [%(levelname)s] %(name)s (%(filename)s:%(lineno)d): %(message)s'
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'formatter': 'standard',
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'DEBUG',
            'formatter': 'detailed',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'monitor.log'),
            'maxBytes': 10485760,  # 10MB
            'backupCount': 5,
            'encoding': 'utf8'
        }
    },
    'loggers': {
        '': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True
        }
    }
}


logging.config.dictConfig(LOGGING_CONFIG)

def load_settings() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
                saved_settings = json.load(f)
                settings = DEFAULT_MONITORING_SETTINGS.copy()
                settings.update(saved_settings)
                return settings
        return DEFAULT_MONITORING_SETTINGS.copy()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return DEFAULT_MONITORING_SETTINGS.copy()

def save_settings(settings: Dict) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
    try:
        with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(settings, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MONITORING_SETTINGS = load_settings()

class Config:
    @staticmethod
    def get_db_path() -> str:
        return DATABASE_FILE
    
    @staticmethod
    def get_proxy_file() -> str:
        return PROXY_FILE
    
    @staticmethod
    def get_settings() -> Dict:
        return load_settings()
    
    @staticmethod
    def save_settings(settings: Dict) -> bool:
        return save_settings(settings)
    
    @staticmethod
    def get_monitoring_settings() -> Dict:
        return MONITORING_SETTINGS
    
    @staticmethod
    def get_proxy_settings() -> Dict:
        return PROXY_SETTINGS
    
    @staticmethod
    def get_limits() -> Dict:
        return LIMITS
    
    @staticmethod
    def get_telethon_settings() -> Dict:
        return TELETHON_SETTINGS

for directory in [BOTS_FOLDER]:
    os.makedirs(directory, exist_ok=True)

logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")