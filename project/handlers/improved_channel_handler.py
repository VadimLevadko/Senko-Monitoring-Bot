import logging
import asyncio
from telethon import events
from typing import List, Dict, Tuple, Any
from telethon.tl.types import Channel, PeerChannel, Chat, InputPeerChannel
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest

class ImprovedChannelHandler:
    def __init__(self, message_monitor, db_manager):
        self.monitor = message_monitor
        self.db = db_manager
        self.logger = logging.getLogger(__name__)
        
    async def process_channel_addition(self, channel_links: List[str], progress_callback) -> Tuple[int, List[str]]:
        added = 0
        errors = []
        total = len(channel_links)
        new_channels = []

        try:
            if not self.monitor.monitoring_clients:
                return 0, ["‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"]

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ    
            distribution_before = await self.monitor.distributor.load_distribution()
            stats_before = self._get_distribution_stats(distribution_before)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç
            check_client = next(iter(self.monitor.monitoring_clients.values()))

            for i, link in enumerate(channel_links, 1):
                try:
                    status = f"üîÑ *–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞ {i}/{total}*\n\n"
                    await progress_callback(status)

                    chat_link = self._process_channel_link(link)
                    entity = await check_client.get_entity(chat_link)

                    if not isinstance(entity, (Channel, PeerChannel)):
                        errors.append(f"{link}: –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞")
                        continue

                    if await self._is_channel_exists(entity.id):
                        errors.append(f"{link}: –ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
                        continue

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É
                    await self.db.add_channel(
                        chat_id=entity.id,
                        title=entity.title,
                        username=entity.username
                    )
                    
                    new_channels.append({
                        'id': entity.id,
                        'title': entity.title,
                        'entity': entity
                    })
                    added += 1

                except Exception as e:
                    errors.append(f"{link}: {str(e)}")
                    continue

            if added > 0:
                await progress_callback(
                    "‚ö°Ô∏è *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤*\n\n"
                    "üîÑ –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è..."
                )

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                all_channels = await self.db.load_channels()
                channel_ids = [int(channel['chat_id']) for channel in all_channels]
                
                new_distribution = await self.monitor.distributor.distribute_channels(
                    channel_ids,
                    list(self.monitor.monitoring_clients.keys())
                )

                if new_distribution:
                    await self.monitor.distributor.apply_distribution(new_distribution)

                    # –¢–µ–ø–µ—Ä—å –≤—Å—Ç—É–ø–∞–µ–º –≤ –∫–∞–Ω–∞–ª—ã
                    for account_id, channels in new_distribution.items():
                        client = self.monitor.monitoring_clients.get(account_id)
                        if client:
                            for new_channel in new_channels:
                                if new_channel['id'] in channels:
                                    await progress_callback(
                                        f"üîÑ –í—Å—Ç—É–ø–∞–µ–º –≤ –∫–∞–Ω–∞–ª {new_channel['title']} —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç {account_id}..."
                                    )
                                    
                                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º
                                    for sec in range(30, 0, -1):
                                        if sec % 5 == 0:
                                            await progress_callback(
                                                f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º: {sec} —Å–µ–∫"
                                            )
                                        await asyncio.sleep(1)
                                    
                                    try:
                                        await self.safe_join_channel(client, new_channel['id'])
                                        await asyncio.sleep(5)
                                    except Exception as e:
                                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª {new_channel['id']}: {e}")

                            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                            for handler in client.list_event_handlers():
                                client.remove_event_handler(handler[0])

                            client.add_event_handler(
                                self.monitor.message_handler,
                                events.NewMessage(chats=channels)
                            )

                    stats_after = self._get_distribution_stats(new_distribution)
                    
                    result = (
                        "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤*\n\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: `{added}`\n"
                        f"‚ùå –û—à–∏–±–æ–∫: `{len(errors)}`\n"
                        f"üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: `{total}`\n\n"
                        "*–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ:*\n" +
                        self._format_distribution_stats(stats_before) +
                        "\n*–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ:*\n" +
                        self._format_distribution_stats(stats_after)
                    )

                    if errors:
                        result += "\n\n‚ùå *–û—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:*\n"
                        result += "\n".join(f"‚Ä¢ {error}" for error in errors)

                    await progress_callback(result)

            return added, errors

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return 0, [f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"]

    def _process_channel_link(self, link: str) -> str:
        if link.startswith('https://t.me/'):
            if '+' in link:
                return link
            username = link.split('/')[-1]
            return f"@{username}"
        elif not link.startswith('@'):
            return f"@{link}"
        return link

    async def _is_channel_exists(self, chat_id: int) -> bool:
        channels = await self.db.load_channels()
        return any(int(channel['chat_id']) == chat_id for channel in channels)

    async def safe_join_channel(self, client, chat_id: int) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É"""
        try:
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ username
                entity = None
                channels = await self.db.load_channels()
                for channel in channels:
                    if int(channel['chat_id']) == chat_id and channel.get('username'):
                        try:
                            entity = await client.get_entity(f"@{channel['username']}")
                            break
                        except:
                            pass

                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —á–µ—Ä–µ–∑ username, –ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ ID
                if not entity:
                    entity = await client.get_entity(chat_id)

                # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç—É–ø–∏—Ç—å
                if isinstance(entity, (Channel, Chat)):
                    try:
                        await client(JoinChannelRequest(entity))
                        self.logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É: {entity.title}")
                        await asyncio.sleep(2)
                        return True
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç {entity.title}: {e}")
                        return False
                else:
                    self.logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —á–∞—Ç–∞: {type(entity)}")
                    return False

            except ValueError as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–∏
                try:
                    dialogs = await client.get_dialogs()
                    for dialog in dialogs:
                        if dialog.entity.id == chat_id:
                            entity = dialog.entity
                            await client(JoinChannelRequest(entity))
                            self.logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–∏: {entity.title}")
                            await asyncio.sleep(2)
                            return True
                    self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç {chat_id} –≤ –¥–∏–∞–ª–æ–≥–∞—Ö")
                    return False
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö: {e}")
                    return False

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}: {e}")
            return False

    def _get_distribution_stats(self, distribution: Dict[str, List[int]]) -> Dict[str, Any]:
        stats = {
            'total_channels': sum(len(channels) for channels in distribution.values()),
            'accounts': len(distribution),
            'per_account': {
                account: len(channels) 
                for account, channels in distribution.items()
            }
        }
        if stats['accounts'] > 0:
            stats['avg_channels'] = stats['total_channels'] / stats['accounts']
        else:
            stats['avg_channels'] = 0
        return stats

    def _format_distribution_stats(self, stats: Dict[str, Any]) -> str:
        result = [
            f"üì± –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: `{stats['accounts']}`",
            f"üì¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: `{stats['total_channels']}`",
            f"üìä –í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: `{stats['avg_channels']:.1f}`\n"
        ]
        
        for account, count in stats['per_account'].items():
            result.append(f"üë§ `{account}`: {count} –∫–∞–Ω–∞–ª–æ–≤")
            
        return "\n".join(result)