import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from ..config import STATES
import asyncio

logger = logging.getLogger(__name__)

class AdminHandler:
    def __init__(self, db_manager):
        self.db = db_manager
        self.logger = logging.getLogger(__name__)
        self.monitor_handler = None

    def set_monitor_handler(self, monitor_handler):
        self.monitor_handler = monitor_handler

    async def show_admin_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='add_admin')],
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data='list_admins')],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')]
            ]
            
            message = (
                "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
                "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
            )
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
            return STATES['MANAGING_ADMINS']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–æ–≤: {e}")
            return STATES['MONITORING']

    async def handle_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        query = update.callback_query
        try:
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data}")
            await query.answer()
            
            if query.data == 'add_admin':
                return await self.start_admin_addition(update, context)
            
            elif query.data == 'list_admins':
                return await self.list_admins(update, context)
            
            elif query.data.startswith('remove_admin_'):
                username = query.data.replace('remove_admin_', '')
                return await self.remove_admin(update, context, username)
                
            elif query.data == 'back_to_admins':
                return await self.show_admin_menu(update, context)
                
            elif query.data == 'back_to_monitor':
                if self.monitor_handler:
                    return await self.monitor_handler.show_monitor_menu(update, context)
                return STATES['MONITORING']
                
            return STATES['MANAGING_ADMINS']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {query.data}: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')
                ]])
            )
            return STATES['MANAGING_ADMINS']

    async def start_admin_addition(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            message = (
                "üë§ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "‚Ä¢ @username\n"
                "‚Ä¢ https://t.me/username\n"
                "‚Ä¢ username\n\n"
                "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
            )
            
            keyboard = [[InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data='back_to_admins')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return STATES['ADDING_ADMIN']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
            return STATES['MANAGING_ADMINS']

    async def list_admins(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            admins = await self.db.get_admins()
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {admins}")

            if not admins:
                message = "üìã *–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç*"
                keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_admins')]]
            else:
                message = "üìã *–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤*\n\n"
                
                for admin in admins:
                    safe_username = admin['username'].replace('_', '\\_')
                    safe_added_by = admin['added_by'].replace('_', '\\_')
                    
                    if isinstance(admin['added_at'], str):
                        added_date = admin['added_at'].split('.')[0]
                    else:
                        added_date = admin['added_at'].strftime("%Y-%m-%d %H:%M:%S")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–¥–º–∏–Ω–∞
                    admin_type = "üëë –°—É–ø–µ—Ä –∞–¥–º–∏–Ω" if admin['is_super_admin'] else "üë§ –ê–¥–º–∏–Ω"
                    
                    message += (
                        f"{admin_type}\n"
                        f"–ò–º—è: @{safe_username}\n"
                        f"–î–æ–±–∞–≤–∏–ª: @{safe_added_by}\n"
                        f"–î–∞—Ç–∞: `{added_date}`\n"
                        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    )
                
                keyboard = []
                for admin in admins:
                    if not admin['is_super_admin']:
                        keyboard.append([
                            InlineKeyboardButton(
                                f"üóë –£–¥–∞–ª–∏—Ç—å @{admin['username']}", 
                                callback_data=f"remove_admin_{admin['username']}"
                            )
                        ])
                
                keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_admins')])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if isinstance(update, Update):
                if update.callback_query:
                    await update.callback_query.edit_message_text(
                        text=message,
                        reply_markup=reply_markup,
                        parse_mode='Markdown',
                        disable_web_page_preview=True
                    )
                else:
                    await update.message.reply_text(
                        text=message,
                        reply_markup=reply_markup,
                        parse_mode='Markdown',
                        disable_web_page_preview=True
                    )
            
            return STATES['MANAGING_ADMINS']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤: {e}")
            error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
            if isinstance(update, Update):
                if update.callback_query:
                    await update.callback_query.edit_message_text(
                        error_message,
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')
                        ]]),
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text(
                        error_message,
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')
                        ]]),
                        parse_mode='Markdown'
                    )
            return STATES['MANAGING_ADMINS']

    async def add_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            input_text = update.message.text.strip()
            username = None
            
            if input_text.startswith('@'):
                username = input_text[1:]  # –£–±–∏—Ä–∞–µ–º @
            elif 't.me/' in input_text:
                username = input_text.split('t.me/')[-1].split('?')[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å—Å—ã–ª–∫–∏
            else:
                username = input_text.strip('/')
            
            if not username:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username.\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                    "‚Ä¢ @username\n"
                    "‚Ä¢ https://t.me/username\n"
                    "‚Ä¢ username\n\n"
                    "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
                )
                return STATES['ADDING_ADMIN']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–¥–º–∏–Ω
            if await self.db.is_admin(username):
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                )
                return STATES['MANAGING_ADMINS']

            # –ü–æ–ª—É—á–∞–µ–º username —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
            current_admin = update.effective_user.username

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
            success = await self.db.add_admin(
                username=username,
                added_by=current_admin
            )

            if success:
                await update.message.reply_text(
                    f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω\n\n"
                    "‚ÑπÔ∏è –ü–µ—Ä–µ–¥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
                    f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ @{context.bot.username}\n"
                    "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n"
                    "3. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞"
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )

            return await self.show_admin_menu(update, context)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
            return STATES['MANAGING_ADMINS']

    async def remove_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE, username: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            query = update.callback_query
            current_admin = query.from_user.username
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω
            if not await self.db.is_admin(username):
                await query.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return await self.list_admins(update, context)
                
            # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            success = await self.db.remove_admin(username, current_admin)
            
            if success:
                await query.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            else:
                await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
            return await self.list_admins(update, context)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ {username}: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return STATES['MANAGING_ADMINS']

    def get_handlers(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        return [
            self.show_admin_menu,
            self.handle_admin_callback,
            self.add_admin,
            self.list_admins,
            self.remove_admin
        ]