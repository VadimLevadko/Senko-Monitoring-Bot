import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import ContextTypes
from project.database.database_manager import DatabaseManager
from project.config import STATES

logger = logging.getLogger(__name__)

class KeywordHandler:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager
        self.logger = logging.getLogger(__name__)
        self.monitor_handler = None
    
    def set_monitor_handler(self, monitor_handler):
        self.monitor_handler = monitor_handler

    async def show_keywords_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data='add_keyword')],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤", callback_data='list_keywords')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='keyword_stats')],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            "üîç *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        )

        if update.callback_query:
            await update.callback_query.message.edit_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        return STATES['MANAGING_KEYWORDS']

    async def handle_keyword_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        try:
            if query.data == 'add_keyword':
                return await self.start_keyword_addition(update, context)
                
            elif query.data == 'list_keywords':
                return await self.list_keywords(update, context)
                
            elif query.data == 'keyword_stats':
                return await self.show_keyword_stats(update, context)
                
            elif query.data == 'back_to_keywords':
                return await self.show_keywords_menu(update, context)
                
            elif query.data == 'back_to_monitor':
                if hasattr(self, 'monitor_handler') and self.monitor_handler:
                    return await self.monitor_handler.show_monitor_menu(update, context)
                return STATES['MONITORING']
                
            elif query.data.startswith('delete_keyword_'):
                keyword = query.data.replace('delete_keyword_', '')
                keywords = self.db.load_keywords()
                
                if keyword in keywords:
                    keywords.remove(keyword)
                    if self.db.save_keywords(keywords):
                        await query.answer(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —É–¥–∞–ª–µ–Ω–æ")
                        return await self.list_keywords(update, context)
                    else:
                        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞")
                        return STATES['MANAGING_KEYWORDS']
                else:
                    await query.answer("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return STATES['MANAGING_KEYWORDS']

            return STATES['MANAGING_KEYWORDS']

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {query.data}: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            return STATES['MANAGING_KEYWORDS']



    async def start_keyword_addition(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
        try:
            message = (
                "*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É.\n"
                "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n\n"
                "–ü—Ä–∞–≤–∏–ª–∞:\n"
                "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 3 —Å–∏–º–≤–æ–ª–∞\n"
                "‚Ä¢ –ë–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤\n"
                "‚Ä¢ –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É\n\n"
                "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
            )

            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=message,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    text=message,
                    parse_mode='Markdown'
                )

            return STATES['ADDING_KEYWORD']

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {e}")
            if update.callback_query:
                await update.callback_query.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            return STATES['MANAGING_KEYWORDS']

    async def add_keywords(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        words = update.message.text.strip().split('\n')
        added = []
        skipped = []
        
        existing_keywords = self.db.load_keywords()
        
        for word in words:
            word = word.strip()
            if len(word) < 3:
                skipped.append(f"{word} (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ)")
                continue
            if any(char in word for char in ['!', '@', '#', '$', '%', '^', '&', '*']):
                skipped.append(f"{word} (—Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)")
                continue
            if word in existing_keywords:
                skipped.append(f"{word} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                continue
                
            existing_keywords.append(word)
            added.append(word)

        if added:
            self.db.save_keywords(existing_keywords)

        message = []
        if added:
            message.append("‚úÖ *–î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–æ–≤–∞:*\n" + "\n".join(f"‚Ä¢ {word}" for word in added))
        if skipped:
            message.append("‚ùå *–ü—Ä–æ–ø—É—â–µ–Ω—ã —Å–ª–æ–≤–∞:*\n" + "\n".join(f"‚Ä¢ {word}" for word in skipped))
        
        await update.message.reply_text(
            "\n\n".join(message),
            parse_mode='Markdown'
        )
        
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        )
        return STATES['ADDING_KEYWORD']

    async def finish_keyword_addition(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        )
        return await self.show_keywords_menu(update, context)

    async def list_keywords(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            keywords = self.db.load_keywords()
            
            if not keywords:
                message = "üìã *–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤*\n\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
                keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_keywords')]]
            else:
                message = "üìã *–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1/1)\n\n"
                for keyword in keywords:
                    message += f"‚Ä¢ {keyword}\n"
                
                keyboard = []
                for keyword in keywords:
                    keyboard.append([InlineKeyboardButton(
                        f"üóë –£–¥–∞–ª–∏—Ç—å {keyword}", 
                        callback_data=f'delete_keyword_{keyword}'
                    )])
                keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_keywords')])

            reply_markup = InlineKeyboardMarkup(keyboard)

            if isinstance(update, Update) and update.callback_query:
                await update.callback_query.message.edit_text(
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )

            return STATES['MANAGING_KEYWORDS']

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
            if isinstance(update, Update) and update.callback_query:
                await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞")
            return STATES['MANAGING_KEYWORDS']

    async def delete_keyword(self, query: Update, context: ContextTypes.DEFAULT_TYPE, keyword: str):
        try:
            keywords = self.db.load_keywords()
            self.logger.info(f"–£–¥–∞–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")
            
            if keyword in keywords:
                keywords.remove(keyword)
                if self.db.save_keywords(keywords):
                    await query.edit_message_text(
                        f"‚úÖ –°–ª–æ–≤–æ '{keyword}' —É–¥–∞–ª–µ–Ω–æ",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data='list_keywords')
                        ]])
                    )
                    await asyncio.sleep(2)
                    return await self.list_keywords(query, context)
                
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞")
            return STATES['MANAGING_KEYWORDS']
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ {keyword}: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            return STATES['MANAGING_KEYWORDS']

    async def show_keyword_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            query = update.callback_query
            await query.answer()

            stats = await self.db.get_keyword_stats()
            
            message = (
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤*\n\n"
                f"üìù –í—Å–µ–≥–æ —Å–ª–æ–≤: {len(stats)}\n\n"
                "*–¢–æ–ø –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º:*\n"
            )

            sorted_stats = sorted(
                stats.items(), 
                key=lambda x: x[1]['total_mentions'], 
                reverse=True
            )[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10

            for keyword, stat in sorted_stats:
                message += (
                    f"‚Ä¢ `{keyword}`: {stat['total_mentions']} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
                    f"  –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stat['mentions_today']}\n"
                    f"  –ó–∞ –Ω–µ–¥–µ–ª—é: {stat['mentions_week']}\n"
                )

            keyboard = [
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_keywords')]
            ]

            await query.edit_message_text(
                text=message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

            return STATES['MANAGING_KEYWORDS']

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback keyword_stats: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_keywords')
                ]])
            )
            return STATES['MANAGING_KEYWORDS']

    async def start_keywords_import(self, query: Update, context: ContextTypes.DEFAULT_TYPE):
        await query.edit_message_text(
            "*–ò–º–ø–æ—Ä—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤.\n"
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç: .txt\n"
            "‚Ä¢ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8\n"
            "‚Ä¢ –û–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–∞ —Å—Ç—Ä–æ–∫—É\n\n"
            "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
            parse_mode='Markdown'
        )
        return STATES['IMPORTING_KEYWORDS']

    async def import_keywords(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message.document:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.")
            return STATES['IMPORTING_KEYWORDS']

        file = await update.message.document.get_file()
        
        try:
            content = await file.read_as_string()
            words = content.strip().split('\n')
            
            added = []
            skipped = []
            existing_keywords = self.db.load_keywords()
            
            for word in words:
                word = word.strip()
                if len(word) < 3 or word in existing_keywords:
                    skipped.append(word)
                    continue
                    
                existing_keywords.append(word)
                added.append(word)

            if added:
                self.db.save_keywords(existing_keywords)

            message = f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(added)} —Å–ª–æ–≤\n‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ {len(skipped)} —Å–ª–æ–≤"
            await update.message.reply_text(message)
            
            return await self.show_keywords_menu(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞.")
            return STATES['IMPORTING_KEYWORDS']

    async def export_keywords(self, query: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–∫–∞–∑–∞–Ω–æ"""
        keywords = self.db.load_keywords()
        
        if not keywords:
            await query.edit_message_text(
                "‚ùå –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_keywords')
                ]])
            )
            return

        content = "\n".join(keywords)
        
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=content.encode(),
            filename="keywords.txt",
            caption="üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"
        )
        
        return await self.show_keywords_menu(query, context)

    def get_handlers(self):
        return [
            self.show_keywords_menu,
            self.handle_keyword_callback,
            self.add_keywords,
            self.finish_keyword_addition,
            self.import_keywords
        ]