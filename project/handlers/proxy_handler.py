import logging
import os
import shutil
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from project.managers.proxy_manager import ProxyManager
from project.config import STATES

logger = logging.getLogger(__name__)

class ProxyHandler:
    def __init__(self, proxy_manager: ProxyManager):
        self.proxy_manager = proxy_manager
        self.logger = logging.getLogger(__name__)
        self.monitor_handler = None
        
    def set_monitor_handler(self, monitor_handler):
        self.monitor_handler = monitor_handler

    async def show_proxy_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            stats = await self.proxy_manager.get_proxy_status()
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data='add_proxy')],
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏", callback_data='list_proxies')],
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data='check_proxies')],
                [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏", callback_data='delete_all_proxies')],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')]
            ]
            
            message = (
                "üîë *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏*\n\n"
                f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: {stats['total']}\n"
                f"‚úÖ –†–∞–±–æ—á–∏—Ö: {stats['working']}\n"
                f"‚ùå –ù–µ—Ä–∞–±–æ—á–∏—Ö: {stats['not_working']}\n"
                f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {stats['error_rate']}%\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            return STATES['MANAGING_PROXIES']
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –ø—Ä–æ–∫—Å–∏: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø—Ä–æ–∫—Å–∏"
            if update.callback_query:
                await update.callback_query.edit_message_text(text=error_text)
            else:
                await update.message.reply_text(text=error_text)
            return STATES['MONITORING']

    def set_monitor_handler(self, monitor_handler):
        self.monitor_handler = monitor_handler

    async def handle_proxy_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data}")
        await query.answer()
        
        try:
            if query.data == 'add_proxy':
                return await self.start_proxy_addition(update, context)
                
            elif query.data == 'list_proxies':
                return await self.list_proxies(update, context)
                
            elif query.data == 'check_proxies':
                return await self.check_proxies(update, context)
                
            elif query.data == 'delete_all_proxies':
                return await self.delete_all_proxies(update, context)
                
            elif query.data == 'back_to_monitor':
                self.logger.info("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                if self.monitor_handler:
                    return await self.monitor_handler.show_monitor_menu(update, context)
                else:
                    self.logger.error("monitor_handler –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return STATES['MONITORING']
                    
            return STATES['MONITORING']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {query.data}: {e}")
            await query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')
                ]]),
                parse_mode='Markdown'
            )
            return STATES['MONITORING']  
            
    async def show_delete_confirmation(self, query: Update, context: ContextTypes.DEFAULT_TYPE):
        await query.edit_message_text(
            "‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏?*\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –î–∞", callback_data='confirm_delete'),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='cancel_delete')
                ],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_proxies')]
            ]),
            parse_mode='Markdown'
        )
        return STATES['CONFIRMING_DELETE']

    async def delete_all_proxies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏"""
        try:
            self.proxy_manager.clear_proxies()
            await update.callback_query.message.edit_text(
                "‚úÖ –í—Å–µ –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_proxies')
                ]]),
                parse_mode='Markdown'
            )
            return STATES['MANAGING_PROXIES']
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            await update.callback_query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_proxies')
                ]]),
                parse_mode='Markdown'
            )
            return STATES['MANAGING_PROXIES']
            
    async def start_proxy_addition(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
        try:
            await update.callback_query.message.edit_text(
                "üì§ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ `IP:PORT:LOGIN:PASSWORD`\n"
                "‚Ä¢ `LOGIN:PASSWORD@IP:PORT`\n\n"
                "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∫—Å–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
                "‚úÖ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done\n"
                "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_proxies')
                ]]),
                parse_mode='Markdown'
            )
            return STATES['ADDING_PROXY']
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
            return STATES['MONITORING']

    async def add_proxies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –ø—Ä–æ–∫—Å–∏"""
        try:
            proxy_lines = update.message.text.strip().split('\n')
            status_message = await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏...")

            added = 0
            invalid = 0
            total = len(proxy_lines)
            
            for i, line in enumerate(proxy_lines, 1):
                line = line.strip()
                if not line:
                    continue
                    
                proxy_config = self.proxy_manager.parse_proxy(line)
                if not proxy_config:
                    invalid += 1
                    continue

                is_working = await self.proxy_manager.check_proxy(proxy_config)
                if is_working:
                    self.proxy_manager.add_proxy(line)
                    added += 1
                else:
                    invalid += 1

                if i % 5 == 0:
                    await status_message.edit_text(
                        f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏... {i}/{total}\n"
                        f"‚úÖ –†–∞–±–æ—á–∏—Ö: {added}\n"
                        f"‚ùå –ù–µ—Ä–∞–±–æ—á–∏—Ö: {invalid}"
                    )

            final_message = (
                "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:*\n\n"
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö: {added}\n"
                f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –Ω–µ—Ä–∞–±–æ—á–∏—Ö: {invalid}\n"
                f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total}\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
            )

            await status_message.edit_text(final_message, parse_mode='Markdown')
            return STATES['ADDING_PROXY']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return STATES['ADDING_PROXY']

    async def finish_proxy_addition(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
        try:
            await update.message.reply_text(
                "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n"
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏..."
            )
            return await self.show_proxy_menu(update, context)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é..."
            )
            return await self.show_proxy_menu(update, context)

    async def list_proxies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏"""
        try:
            results = await self.proxy_manager.check_all_proxies()
            has_invalid = any(not is_working for _, is_working in results)
            
            if not results:
                message = "üìã *–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç*\n\n–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏'"
            else:
                message = "üìã *–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏:*\n\n"
                for proxy_config, is_working in results:
                    status = "‚úÖ" if is_working else "‚ùå"
                    proxy_str = f"{proxy_config['addr']}:{proxy_config['port']}"
                    message += f"{status} `{proxy_str}`\n"

            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='list_proxies')]
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if has_invalid:
                keyboard.append([
                    InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ", callback_data='clear_invalid_proxies')
                ])
                
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_proxies')])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_proxies')
                ]]),
                parse_mode='Markdown'
            )

    async def check_proxies(self, query: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏"""
        try:
            message = await query.edit_message_text("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏...")
            results = await self.proxy_manager.check_all_proxies()
            
            working = sum(1 for _, is_working in results if is_working)
            total = len(results)
            
            status = (
                "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:*\n\n"
                f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total}\n"
                f"‚úÖ –†–∞–±–æ—á–∏—Ö: {working}\n"
                f"‚ùå –ù–µ—Ä–∞–±–æ—á–∏—Ö: {total - working}\n"
                f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–±–æ—á–∏—Ö: {round(working/total*100 if total else 0, 2)}%"
            )

            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data='check_proxies')],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_proxies')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await message.edit_text(
                text=status,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∫—Å–∏: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∫—Å–∏",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_proxies')
                ]])
            )

    async def clear_invalid_proxies(self, query: Update, context: ContextTypes.DEFAULT_TYPE):
       """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
       try:
           await query.edit_message_text("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏...")
           
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
           removed_count = await self.proxy_manager.remove_invalid_proxies()

           message = (
               "üóë *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:*\n\n"
               f"üîç –£–¥–∞–ª–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏: {removed_count}"
           )
           
           keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')]]
           reply_markup = InlineKeyboardMarkup(keyboard)
           
           await query.edit_message_text(
               text=message,
               reply_markup=reply_markup,
               parse_mode='Markdown'
           )
           
       except Exception as e:
           self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏: {e}")
           await query.edit_message_text(
               "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏",
               reply_markup=InlineKeyboardMarkup([[
                   InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')
               ]]),
               parse_mode='Markdown'
           )


    def get_handlers(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        return [
            self.show_proxy_menu,
            self.handle_proxy_callback,
            self.add_proxies,
            self.finish_proxy_addition,  # –ó–∞–±—ã–ª –±–ª—è—Ç—å
            self.list_proxies,
            self.check_proxies,
            self.clear_invalid_proxies
        ]