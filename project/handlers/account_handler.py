import os
import json
import logging
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, error as telegram_error
from telegram.ext import ContextTypes
from typing import Dict, List, Tuple, Optional
from ..managers.account_manager import AccountManager
from ..config import STATES

logger = logging.getLogger(__name__)

class AccountHandler:
    def __init__(self, account_manager: AccountManager, message_monitor):
        self.account_manager = account_manager
        self.message_monitor = message_monitor
        self.logger = logger
        self.monitor_handler = None

    def set_monitor_handler(self, monitor_handler):
        self.monitor_handler = monitor_handler

    async def show_accounts_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data='start_account_add')],
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='list_accounts')],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message = (
                "üë§ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏*\n\n"
                "–ù–∞–∑–≤–∞–Ω–∏–µ .session –∏ .json –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º\n"
            )

            if update.callback_query:
                await update.callback_query.edit_message_text(
                    message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
            return STATES['MANAGING_ACCOUNTS']
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return STATES['MONITORING']

    async def list_accounts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
       try:
           self.logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
           accounts = self.account_manager.get_accounts()
           
           self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
           
           has_invalid_accounts = False
           has_invalid_proxies = False
           
           if not accounts:
               message = (
                   "üìã *–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤*\n\n"
                   "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'"
               )
           else:
               message = "üìã *–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:*\n\n"
               for phone in accounts:
                   try:
                       json_path = os.path.join(self.account_manager.bots_folder, phone, f"{phone}.json")
                       proxy_path = os.path.join(self.account_manager.bots_folder, phone, "proxy.json")
                       
                       # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∞–∫–∫–∞—É–Ω—Ç–∞
                       with open(json_path, 'r', encoding='utf-8') as f:
                           config = json.load(f)

                       # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏
                       proxy_valid = False
                       try:
                           with open(proxy_path, 'r', encoding='utf-8') as f:
                               proxy_config = json.load(f)
                               proxy_valid = await self.account_manager.proxy_manager.check_proxy(proxy_config)
                       except:
                           proxy_valid = False
                           
                       if not proxy_valid:
                           has_invalid_proxies = True

                       # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                       is_valid = False
                       if phone in self.message_monitor.monitoring_clients:
                           client = self.message_monitor.monitoring_clients[phone]
                           if client and client.is_connected():
                               try:
                                   is_valid = await client.is_user_authorized()
                               except:
                                   is_valid = False
                       
                       if not is_valid:
                           has_invalid_accounts = True
                       
                       # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞
                       status = "üü¢ –û–Ω–ª–∞–π–Ω" if is_valid else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
                       proxy_status = "‚úÖ" if proxy_valid else "‚ùå"
                       
                       # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                       name = (f"{config.get('first_name', '')} "
                              f"{config.get('last_name', '')}").strip()
                       username = config.get('username', '')
                       
                       message += (f"{status} {proxy_status} {phone}"
                                 f"{f' (@{username})' if username else ''}"
                                 f"{f': {name}' if name else ''}\n")

                   except Exception as e:
                       message += f"‚ùå {phone}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è\n"
                       self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}: {e}")
                       has_invalid_accounts = True

               message += "\n*–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:*\n"
               message += "üü¢ - –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
               message += "üî¥ - –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
               message += "‚úÖ - –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
               message += "‚ùå - –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"

           keyboard = [
               [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='list_accounts')]
           ]
           
           if has_invalid_accounts:
               keyboard.append([
                   InlineKeyboardButton(
                       "üóë –£–¥–∞–ª–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã", 
                       callback_data='remove_invalid'
                   )
               ])
           
           if has_invalid_proxies:
               keyboard.append([
                   InlineKeyboardButton(
                       "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏", 
                       callback_data='update_invalid_proxies'
                   )
               ])
               
           keyboard.append([
               InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')
           ])
           
           reply_markup = InlineKeyboardMarkup(keyboard)

           try:
               if update.callback_query:
                   await update.callback_query.message.edit_text(
                       text=message,
                       reply_markup=reply_markup,
                       parse_mode='Markdown'
                   )
               else:
                   await update.message.reply_text(
                       text=message,
                       reply_markup=reply_markup,
                       parse_mode='Markdown'
                   )
           except telegram.error.BadRequest as e:
               if "Message is not modified" in str(e):
                   await update.callback_query.answer("–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
               else:
                   raise

           return STATES['MANAGING_ACCOUNTS']

       except Exception as e:
           self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
           error_text = (
               "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
               "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
           )
           error_keyboard = InlineKeyboardMarkup([[
               InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')
           ]])
           
           try:
               if update.callback_query:
                   await update.callback_query.message.edit_text(
                       text=error_text,
                       reply_markup=error_keyboard,
                       parse_mode='Markdown'
                   )
               else:
                   await update.message.reply_text(
                       text=error_text,
                       reply_markup=error_keyboard,
                       parse_mode='Markdown'
                   )
           except telegram.error.BadRequest as e:
               if "Message is not modified" not in str(e):
                   raise
                   
           return STATES['MANAGING_ACCOUNTS']

    async def check_account(self, phone: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
            active_client = self.message_monitor.monitoring_clients.get(phone)
            if active_client and active_client.is_connected():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                    if await active_client.is_user_authorized():
                        name = f"{active_client.me.first_name} {active_client.me.last_name if active_client.me.last_name else ''}"
                        return True, f"üü¢ –û–Ω–ª–∞–π–Ω - {name.strip()}"
                except:
                    pass

            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
            client = await self.account_manager.create_client(phone)
            if not client:
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç ‚ö†Ô∏è"

            try:
                me = await client.get_me()
                if not me:
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ‚ö†Ô∏è"

                name = f"{me.first_name} {me.last_name if me.last_name else ''}"

                try:
                    await client(GetDialogsRequest(
                        offset_date=None,
                        offset_id=0,
                        offset_peer=InputPeerEmpty(),
                        limit=1,
                        hash=0
                    ))
                    return True, f"üü¢ –û–Ω–ª–∞–π–Ω - {name.strip()}"
                except Exception as e:
                    error_msg = str(e)
                    if "USER_DEACTIVATED" in error_msg:
                        return False, f"–ë–∞–Ω üî¥ - {name.strip()}"
                    if "FLOOD_WAIT" in error_msg:
                        return False, f"–§–ª—É–¥ üü° - {name.strip()}"
                    return False, f"–û—à–∏–±–∫–∞: {error_msg} ‚ö†Ô∏è"

            except Exception as e:
                return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)} ‚ö†Ô∏è"

            finally:
                if client and client != active_client:
                    try:
                        await client.disconnect()
                    except:
                        pass

        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {str(e)} ‚ö†Ô∏è"

    async def delete_invalid_accounts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            status_message = await update.callback_query.message.edit_text(
                "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...",
                parse_mode='Markdown'
            )

            accounts = self.account_manager.get_accounts()
            removed = 0
            errors = []

            for phone in accounts[:]:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                    client = self.account_manager.monitoring_clients.get(phone)
                    is_valid = False

                    if client:
                        try:
                            is_valid = await client.is_user_authorized()
                        except:
                            is_valid = False

                        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        try:
                            await client.disconnect()
                        except:
                            pass

                    if not is_valid:
                        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∫–ª–∏–µ–Ω—Ç–æ–≤
                        self.account_manager.monitoring_clients.pop(phone, None)
                        
                        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∞–∫–∫–∞—É–Ω—Ç–∞
                        account_folder = os.path.join(self.account_manager.bots_folder, phone)
                        if os.path.exists(account_folder):
                            import shutil
                            shutil.rmtree(account_folder)
                            removed += 1
                            self.logger.info(f"–£–¥–∞–ª–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {phone}")

                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}: {e}")
                    errors.append(phone)

            message = f"‚úÖ *–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ*\n\n"
            message += f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n"
            message += f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {removed}\n"
            message += f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts) - removed}\n"
            
            if errors:
                message += f"\n‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å:*\n"
                message += "\n".join([f"‚Ä¢ {phone}" for phone in errors])

            await status_message.edit_text(
                message,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data='list_accounts')
                ]]),
                parse_mode='Markdown'
            )

            return STATES['MANAGING_ACCOUNTS']

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            if update.callback_query and update.callback_query.message:
                await update.callback_query.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='list_accounts')
                    ]]),
                    parse_mode='Markdown'
                )
            return STATES['MANAGING_ACCOUNTS']

    async def update_invalid_proxies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
        try:
            status_message = await update.callback_query.message.edit_text(
                "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏...",
                parse_mode='Markdown'
            )

            accounts = self.account_manager.get_accounts()
            updated = 0
            errors = []
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
            available_proxies = await self.account_manager.proxy_manager.get_available_proxies()
            
            if not available_proxies:
                await status_message.edit_text(
                    "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏ –≤ —Å–ø–∏—Å–æ–∫.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='list_accounts')
                    ]]),
                    parse_mode='Markdown'
                )
                return STATES['MANAGING_ACCOUNTS']

            for phone in accounts:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ–∫—Å–∏
                    proxy_path = os.path.join(self.account_manager.bots_folder, phone, "proxy.json")
                    
                    with open(proxy_path, 'r', encoding='utf-8') as f:
                        current_proxy = json.load(f)
                    
                    is_valid = await self.account_manager.proxy_manager.check_proxy(current_proxy)
                    
                    if not is_valid:
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–∫—Å–∏
                        new_proxy = await self.account_manager.proxy_manager.reserve_proxy()
                        
                        if new_proxy:
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                            proxy_str = f"{new_proxy['addr']}:{new_proxy['port']}:{new_proxy['username']}:{new_proxy['password']}"
                            
                            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏
                            with open(self.account_manager.proxy_manager.proxy_file, 'r') as f:
                                proxies = f.readlines()
                            
                            # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
                            with open(self.account_manager.proxy_manager.proxy_file, 'w') as f:
                                for proxy in proxies:
                                    if proxy.strip() != proxy_str:
                                        f.write(proxy)
                                        
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                            with open(proxy_path, 'w', encoding='utf-8') as f:
                                json.dump(new_proxy, f, indent=4)
                                
                            # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª–∏–µ–Ω—Ç
                            if phone in self.account_manager.monitoring_clients:
                                client = self.account_manager.monitoring_clients[phone]
                                try:
                                    await client.disconnect()
                                except:
                                    pass
                                self.account_manager.monitoring_clients.pop(phone)
                            
                            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
                            try:
                                new_client = await self.account_manager.create_client(phone)
                                if new_client:
                                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
                                    self.account_manager.monitoring_clients[phone] = new_client
                                    self.message_monitor.monitoring_clients[phone] = new_client
                                    
                                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                                    try:
                                        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                                        channels = self.message_monitor.distributor.distribution.get(phone, [])
                                        
                                        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
                                        if channels:
                                            new_client.add_event_handler(
                                                self.message_monitor.message_handler,
                                                events.NewMessage(chats=channels)
                                            )
                                        
                                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                                        self.message_monitor.stats['active_clients'] = len(
                                            [c for c in self.message_monitor.monitoring_clients.values() 
                                             if c and c.is_connected()]
                                        )
                                        
                                    except Exception as e:
                                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {phone}: {e}")
                                    
                                    self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è {phone}")
                                    updated += 1
                                    
                            except Exception as e:
                                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç —Å –Ω–æ–≤–æ–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è {phone}: {e}")
                
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è {phone}: {e}")
                    errors.append(phone)

            message = f"‚úÖ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ*\n\n"
            message += f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n"
            message += f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {updated}\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
            
            if errors:
                message += f"\n‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å:*\n"
                message += "\n".join([f"‚Ä¢ {phone}" for phone in errors])
            
            await status_message.edit_text(
                message,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data='list_accounts')
                ]]),
                parse_mode='Markdown'
            )
            
            return STATES['MANAGING_ACCOUNTS']

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            await update.callback_query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='list_accounts')
                ]]),
                parse_mode='Markdown'
            )
            return STATES['MANAGING_ACCOUNTS']

            
    async def handle_account_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤"""
        query = update.callback_query
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data}")
        await query.answer()

        try:
            if query.data == 'start_account_add':
                return await self.start_account_addition(update, context)
                    
            elif query.data == 'list_accounts':
                return await self.list_accounts(update, context)
                    
            elif query.data == 'remove_invalid':
                return await self.delete_invalid_accounts(update, context)
                    
            elif query.data == 'back_to_monitor':
                if self.monitor_handler:
                    return await self.monitor_handler.show_monitor_menu(update, context)
                return STATES['MONITORING']
                    
            elif query.data == 'back_to_accounts':
                return await self.show_accounts_menu(update, context)
                    
            elif query.data == 'update_invalid_proxies':
                return await self.update_invalid_proxies(update, context)
                
            self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")
            return STATES['MANAGING_ACCOUNTS']
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {query.data}: {e}")
            await update.callback_query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_accounts')
                ]]),
                parse_mode='Markdown'
            )
            return STATES['MANAGING_ACCOUNTS']

    async def start_account_addition(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            message = (
                "üì± *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã:\n"
                "1. .session —Ñ–∞–π–ª\n"
                "2. .json —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\n\n"
                "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
            )

            if update.callback_query:
                await update.callback_query.edit_message_text(
                    message,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    message,
                    parse_mode='Markdown'
                )

            context.user_data['state'] = STATES['ADDING_ACCOUNT']
            context.user_data['pending_files'] = {}
            
            return STATES['ADDING_ACCOUNT']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return STATES['MANAGING_ACCOUNTS']

    async def receive_account_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if 'pending_files' not in context.user_data:
                context.user_data['pending_files'] = {}
                
            if not update.message.document:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
                return STATES['ADDING_ACCOUNT']

            file = await update.message.document.get_file()
            file_name = update.message.document.file_name
            
            if not file_name.endswith(('.session', '.json')):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n"
                    "–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .session –∏ .json —Ñ–∞–π–ª—ã."
                )
                return STATES['ADDING_ACCOUNT']
            os.makedirs('temp', exist_ok=True)
            file_path = os.path.join('temp', file_name)
            await file.download_to_drive(file_path)

            base_name = file_name.split('.')[0]
            if base_name not in context.user_data['pending_files']:
                context.user_data['pending_files'][base_name] = {}
            
            file_type = 'session' if file_name.endswith('.session') else 'json'
            context.user_data['pending_files'][base_name][file_type] = file_path

            ready_accounts = []
            waiting_files = []
            
            for acc_name, files in context.user_data['pending_files'].items():
                if len(files) == 2:  # –ï—Å—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞
                    ready_accounts.append(acc_name)
                else:
                    missing = 'session' if 'json' in files else 'json'
                    waiting_files.append(f"{acc_name}.{missing}")

            status = (
                f"‚úÖ –§–∞–π–ª {file_name} –ø–æ–ª—É—á–µ–Ω.\n\n"
                "*–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏:*\n"
            )
            
            if ready_accounts:
                status += "\n*–ì–æ—Ç–æ–≤—ã –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é:*\n"
                for acc in ready_accounts:
                    status += f"‚úÖ {acc}\n"
                    
            if waiting_files:
                status += "\n*–û–∂–∏–¥–∞—é—Ç —Ñ–∞–π–ª–æ–≤:*\n"
                for file in waiting_files:
                    status += f"‚è≥ {file}\n"

            status += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"

            await update.message.reply_text(status, parse_mode='Markdown')

            return STATES['ADDING_ACCOUNT']
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
            return STATES['ADDING_ACCOUNT']

    async def finish_account_addition(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            if not context.user_data.get('pending_files'):
                await update.message.reply_text("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                return STATES['ADDING_ACCOUNT']

            status_message = await update.message.reply_text(
                "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...",
                parse_mode='Markdown'
            )

            results = []
            for base_name, files in context.user_data['pending_files'].items():
                if 'session' in files and 'json' in files:
                    try:
                        await status_message.edit_text(
                            f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {base_name}...",
                            parse_mode='Markdown'
                        )
                        
                        success = await self.account_manager.import_account(
                            files['session'],
                            files['json']
                        )
                        results.append(f"{'‚úÖ' if success else '‚ùå'} –ê–∫–∫–∞—É–Ω—Ç {base_name}")
                    except Exception as e:
                        results.append(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {base_name}: {str(e)}")
                else:
                    results.append(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {base_name}: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ñ–∞–π–ª–æ–≤")

            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for files in context.user_data['pending_files'].values():
                for file_path in files.values():
                    if os.path.exists(file_path):
                        os.remove(file_path)

            context.user_data.pop('pending_files', None)
            
            # –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            report = "*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤:*\n\n"
            report += "\n".join(results)
            
            await status_message.edit_text(
                report,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_accounts")
                ]])
            )
            
            return STATES['MANAGING_ACCOUNTS']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_accounts")
                ]]),
                parse_mode='Markdown'
            )
            return STATES['MANAGING_ACCOUNTS']

    def get_handlers(self):
        return [
            self.show_accounts_menu,
            self.handle_account_callback,
            self.add_proxies,
            self.finish_proxy_addition,
            self.list_accounts,
            self.check_proxies,
            self.clear_invalid_proxies,
            self.update_invalid_proxies,  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.delete_invalid_accounts
        ]