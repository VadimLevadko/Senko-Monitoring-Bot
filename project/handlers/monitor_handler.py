import logging
import asyncio
from project.config import STATES, load_settings, MESSAGE_TEMPLATES, MONITORING_SETTINGS
from typing import List, Dict, Optional, Tuple, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, error as telegram_error
from telegram.ext import ContextTypes
from telegram import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
from project.managers.message_monitor import MessageMonitor
from telegram import error as telegram_error
from .improved_channel_handler import ImprovedChannelHandler

logger = logging.getLogger(__name__)

class MonitorHandler:
    def __init__(self, message_monitor: MessageMonitor):
        self.monitor = message_monitor
        self.logger = logging.getLogger(__name__)
        self.handlers = None
        self.start_time = None
        self.channel_handler = ImprovedChannelHandler(message_monitor, message_monitor.db)

    def set_handlers(self, handlers):
        self.handlers = handlers
   
    async def start_channel_addition(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            query = update.callback_query
            await query.answer()
            
            message = (
                "*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ `https://t.me/group_name`\n"
                "‚Ä¢ `@group_name`\n"
                "‚Ä¢ `https://t.me/+abcdef...` (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤)\n\n"
                "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
            )
            
            keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return STATES['ADDING_CHANNEL']
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
            if update.callback_query:
                await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            return STATES['MONITORING']


    async def show_monitor_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            stats = self.monitor.get_stats()
            status_emoji = "üü¢" if stats['status'] == '–ê–∫—Ç–∏–≤–µ–Ω' else "üî¥"
            
            message = (
                f"*–ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status_emoji} {stats['status']}\n"
                f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats.get('uptime', '0:00:00')}\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['messages_processed']}\n"
                f"–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {stats['keywords_found']}\n"
                f"–û—à–∏–±–æ–∫: {stats['errors']}\n"
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['active_clients']}\n"
                f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats['watched_channels']}\n"
            )

            keyboard = [
                [
                    InlineKeyboardButton(
                        "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if stats['status'] == '–ê–∫—Ç–∏–≤–µ–Ω' else "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å",
                        callback_data='toggle_monitoring'
                    )
                ],
                [
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data='add_channel'),
                    InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data='list_channels')
                ],
                [
                    InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏", callback_data='manage_accounts'),
                ],
                [
                    InlineKeyboardButton("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏", callback_data='manage_proxies'),
                ],
                [
                    InlineKeyboardButton("üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data='manage_keywords'),
                ],
                [
                    InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data='manage_admins'),  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
                ],
                [
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='monitor_settings')
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)

            if isinstance(update, Update):
                if update.callback_query:
                    await update.callback_query.edit_message_text(
                        text=message,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                elif update.message:
                    await update.message.reply_text(
                        text=message,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                return STATES['MONITORING']
            return STATES['MONITORING']

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return STATES['MONITORING']

    async def handle_monitor_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        query = update.callback_query
        try:
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data}")
            await query.answer()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if query.data == 'back_to_monitor':
                return await self.show_monitor_menu(update, context)
                
            elif query.data == 'monitor_settings':
                return await self.show_settings_menu(query, context)
                
            elif query.data == 'back_to_settings':
                return await self.show_settings_menu(query, context)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if query.data == 'toggle_monitoring':
                return await self.toggle_monitoring(query, context)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
            elif query.data == 'add_channel':
                return await self.start_channel_addition(update, context)
            elif query.data == 'list_channels':
                return await self.list_channels(update, context)
            elif query.data == 'check_channels':
                return await self.check_channels(query, context)
            elif query.data == 'confirm_delete':
                return await self.delete_all_channels(update, context)
            elif query.data == 'cancel_delete':
                return await self.list_channels(update, context)
                   
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            elif query.data == 'edit_notifications':
                return await self.edit_notifications(query, context)
            elif query.data == 'edit_performance':
                return await self.edit_performance(query, context)
            elif query.data == 'edit_autorestart':
                return await self.edit_autorestart(query, context)
            elif query.data == 'edit_timeouts':
                return await self.edit_timeouts(query, context)
            elif query.data == 'edit_other':
                return await self.edit_other_settings(query, context)
                       
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
            elif query.data.startswith('change_'):
                setting = query.data.replace('change_', '')
                context.user_data['editing_setting'] = setting
                ranges = {
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    'check_interval': (1, 60),                    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
                    'max_channels_per_client': (100, 1000),       # –ú–∞–∫—Å–∏–º—É–º –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    'notification_chunk_size': (10, 100),         # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    'message_processing_timeout': (10, 120),      # –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                    
                    # –¢–∞–π–º-–∞—É—Ç—ã –∏ –∑–∞–¥–µ—Ä–∂–∫–∏
                    'join_timeout': (10, 300),                    # –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª
                    'join_channel_delay': (1, 30),                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è–º–∏
                    'retry_interval': (60, 600),                  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                    'restart_delay': (30, 300),                   # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
                    
                    # –õ–∏–º–∏—Ç—ã –∏ –ø–æ—Ä–æ–≥–∏
                    'max_message_length': (1000, 10000),          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    'max_keywords': (100, 10000),                 # –ú–∞–∫—Å–∏–º—É–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    'max_errors_before_restart': (1, 20),         # –ú–∞–∫—Å–∏–º—É–º –æ—à–∏–±–æ–∫ –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    'flood_wait_threshold': (30, 300),            # –ü–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–ª—É–¥–∞
                    
                    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
                    'cleanup_interval': (3600, 86400),            # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏ (1 —á–∞—Å - 1 –¥–µ–Ω—å)
                    'data_retention_days': (1, 90),               # –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–¥–Ω–∏)
                }
                range_info = ranges.get(setting, (0, 100))
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                settings = load_settings()
                current_value = settings.get(setting, "–ù–µ –∑–∞–¥–∞–Ω–æ")
                
                message = (
                    f"‚öôÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
                    f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `{current_value}`\n"
                    f"–î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: `{range_info[0]}-{range_info[1]}`\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                back_button = 'monitor_settings'
                if setting in ['notification_chunk_size', 'message_processing_timeout']:
                    back_button = 'edit_notifications'
                elif setting in ['check_interval', 'max_channels_per_client']:
                    back_button = 'edit_performance'
                elif setting in ['restart_delay', 'max_errors_before_restart']:
                    back_button = 'edit_autorestart'
                elif setting in ['join_timeout', 'message_timeout']:
                    back_button = 'edit_timeouts'
                elif setting in ['max_message_length', 'max_keywords', 'flood_wait_threshold',
                               'join_channel_delay', 'retry_interval', 'cleanup_interval',
                               'data_retention_days']:
                    back_button = 'edit_other'
                
                await query.edit_message_text(
                    text=message,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=back_button)
                    ]]),
                    parse_mode='Markdown'
                )
                return STATES['ENTERING_VALUE']
                       
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
            elif query.data == 'delete_channels_menu':
                return await self.show_delete_channels_menu(update, context)
            elif query.data.startswith('delete_channel_'):
                chat_id = int(query.data.replace('delete_channel_', ''))
                return await self.delete_single_channel(update, context, chat_id)
            elif query.data == 'confirm_delete_all':
                return await self.confirm_delete_all_channels(update, context)
            elif query.data == 'execute_delete_all':
                return await self.delete_all_channels(update, context)
                       
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            elif query.data == 'manage_accounts':
                return await self.handlers['account'].show_accounts_menu(update, context)
                       
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Å–∏
            elif query.data == 'manage_proxies':
                return await self.handlers['proxy'].show_proxy_menu(update, context)
                       
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            elif query.data == 'manage_keywords':
                return await self.handlers['keyword'].show_keywords_menu(update, context)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–æ–≤
            elif query.data == 'manage_admins':
                return await self.handlers['admin'].show_admin_menu(update, context)

            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞
            self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")
            return await self.show_monitor_menu(update, context)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {query.data}: {e}")
            return await self.show_error(update, "–æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
   
    async def show_error(self, update: Update, error_context: str) -> int:
        try:
            if hasattr(update, 'callback_query'):
                await update.callback_query.edit_message_text(
                    text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ {error_context}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')
                    ]]),
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ {error_context}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')
                    ]]),
                    parse_mode='Markdown'
                )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ—à–∏–±–∫–∏: {e}")
            
        return STATES['MONITORING']
   
    async def confirm_delete_all_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            query = update.callback_query
            await query.answer()

            await query.edit_message_text(
                "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*\n\n"
                "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å *–í–°–ï* –∫–∞–Ω–∞–ª—ã?\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å!",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="execute_delete_all"),
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="delete_channels_menu")
                    ]
                ]),
                parse_mode='Markdown'
            )
            
            return STATES['CONFIRMING_DELETE']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return await self.show_error(update, "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è")

    async def delete_single_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            query = update.callback_query
            
            channels = await self.monitor.db.load_channels()
            channel_info = next((ch for ch in channels if ch['chat_id'] == chat_id), None)
            
            if not channel_info:
                await query.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return await self.show_delete_channels_menu(update, context)
                
            # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
            success = await self.monitor.remove_channel(chat_id)
            
            if success:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
                await query.edit_message_text(
                    f"‚úÖ –ö–∞–Ω–∞–ª *{channel_info['title']}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤...",
                    parse_mode='Markdown'
                )
                await asyncio.sleep(2)
                return await self.show_delete_channels_menu(update, context)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
                return await self.show_delete_channels_menu(update, context)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ {chat_id}: {e}")
            return await self.show_error(update, "—É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")

    async def show_delete_channels_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            self.logger.info("===== –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ =====")
            query = update.callback_query

            channels = await self.monitor.db.load_channels()
            self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
            
            if not channels:
                await query.edit_message_text(
                    "‚ùå *–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç*",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="list_channels")
                    ]]),
                    parse_mode='Markdown'
                )
                return STATES['MANAGING_CHANNELS']

            message_text = (
                "üóë *–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤*\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
            )

            keyboard = []
            
            for channel in channels:
                title = channel.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                chat_id = channel.get('chat_id')
                button_text = f"‚ùå {title[:30]}..." if len(title) > 30 else f"‚ùå {title}"
                keyboard.append([
                    InlineKeyboardButton(button_text, callback_data=f"delete_channel_{chat_id}")
                ])

            keyboard.extend([
                [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="confirm_delete_all")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_channels")]
            ])

            await query.edit_message_text(
                text=message_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

            return STATES['MANAGING_CHANNELS']

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return await self.show_error(update, "–ø–æ–∫–∞–∑–µ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è")
            
    async def delete_all_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            query = update.callback_query
            await query.answer()
            
            channels = await self.monitor.db.load_channels()
            total = len(channels)
            deleted = 0

            await query.edit_message_text(
                "üîÑ *–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤*\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                parse_mode='Markdown'
            )

            for channel in channels:
                try:
                    if await self.monitor.remove_channel(channel['chat_id']):
                        deleted += 1
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel['chat_id']}: {e}")

            result_message = (
                "‚úÖ *–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\n\n"
                f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {deleted}/{total}\n\n"
            )

            await query.edit_message_text(
                result_message,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="list_channels")
                ]]),
                parse_mode='Markdown'
            )

            return STATES['MONITORING']

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return await self.show_error(update, "—É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤")

    async def _update_stats(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        try:
            job = context.job
            stats = self.monitor.get_stats()
            status_emoji = "üü¢" if stats['status'] == '–ê–∫—Ç–∏–≤–µ–Ω' else "üî¥"

            message = (
                f"*–ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status_emoji} {stats['status']}\n"
                f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats.get('uptime', '0:00:00')}\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['messages_processed']}\n"
                f"–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {stats['keywords_found']}\n"
                f"–û—à–∏–±–æ–∫: {stats['errors']}\n"
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['active_clients']}\n"
                f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats['watched_channels']}\n"
            )

            reply_markup = InlineKeyboardMarkup(job.data['keyboard'])

            try:
                await context.bot.edit_message_text(
                    chat_id=job.data['chat_id'],
                    message_id=job.data['message_id'],
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            except telegram_error.BadRequest as e:
                if 'Message is not modified' not in str(e):
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            except telegram_error.TelegramError as e:
                self.logger.error(f"Telegram –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def edit_performance(self, query: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            settings = load_settings()
            
            keyboard = [
                [InlineKeyboardButton(
                    f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {settings['check_interval']} —Å–µ–∫",
                    callback_data='change_check_interval'
                )],
                [InlineKeyboardButton(
                    f"–ö–∞–Ω–∞–ª–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {settings['max_channels_per_client']}",
                    callback_data='change_max_channels_per_client'
                )],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='monitor_settings')]
            ]
            
            await query.edit_message_text(
                "‚ö°Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
            return STATES['EDITING_PERFORMANCE']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return await self.show_monitor_menu(query, context)

    async def show_settings_menu(self, query: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            settings = load_settings()
            
            message = (
                "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*\n\n"
                f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: `{settings['check_interval']}` —Å–µ–∫\n"
                f"üìù –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: `{settings['max_message_length']}`\n"
                f"üìä –ö–∞–Ω–∞–ª–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: `{settings['max_channels_per_client']}`\n"
                f"‚è≥ –¢–∞–π–º-–∞—É—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: `{settings.get('join_timeout', 30)}` —Å–µ–∫\n"
                f"üîç –ú–∞–∫—Å. –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: `{settings['max_keywords']}`\n"
                f"üïí –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: `{settings['data_retention_days']}` –¥–Ω–µ–π\n\n"
                "*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n"
                f"‚Ä¢ –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: `{settings['notification_chunk_size']}`\n"
                f"‚Ä¢ –¢–∞–π–º–∞—É—Ç: `{settings['message_processing_timeout']}` —Å–µ–∫\n\n"
                "*–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:*\n"
                f"‚Ä¢ –ê–≤—Ç–æ—Ä–µ—Å—Ç–∞—Ä—Ç: `{'–í–∫–ª—é—á–µ–Ω' if settings['auto_restart'] else '–í—ã–∫–ª—é—á–µ–Ω'}`\n"
                f"‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞: `{settings['restart_delay']}` —Å–µ–∫\n"
                f"‚Ä¢ –ú–∞–∫—Å. –æ—à–∏–±–æ–∫: `{settings['max_errors_before_restart']}`"
            )

            keyboard = [
                [
                    InlineKeyboardButton("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='edit_notifications'),
                    InlineKeyboardButton("‚ö°Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data='edit_performance')
                ],
                [
                    InlineKeyboardButton("üîÑ –ê–≤—Ç–æ—Ä–µ—Å—Ç–∞—Ä—Ç", callback_data='edit_autorestart'),
                    InlineKeyboardButton("‚è±Ô∏è –¢–∞–π–º-–∞—É—Ç—ã", callback_data='edit_timeouts')
                ],
                [
                    InlineKeyboardButton("‚öôÔ∏è –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='edit_other')
                ],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return STATES['SETTINGS_MENU']
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            if isinstance(query, Update):
                return await self.show_error(query, "–∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            else:
                return STATES['MONITORING']

    async def edit_other_settings(self, query: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            settings = load_settings()
            
            message = (
                "‚öôÔ∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
                "*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:*\n"
                f"‚Ä¢ –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: `{settings['max_message_length']}`\n"
                f"‚Ä¢ –ú–∞–∫—Å. –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: `{settings['max_keywords']}`\n\n"
                "*–ó–∞–¥–µ—Ä–∂–∫–∏ –∏ —Ç–∞–π–º-–∞—É—Ç—ã:*\n"
                f"‚Ä¢ –ü–æ—Ä–æ–≥ —Ñ–ª—É–¥–∞: `{settings['flood_wait_threshold']}` —Å–µ–∫\n"
                f"‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: `{settings['join_channel_delay']}` —Å–µ–∫\n"
                f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–∞: `{settings['retry_interval']}` —Å–µ–∫\n\n"
                "*–•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:*\n"
                f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏: `{settings['cleanup_interval']}` —Å–µ–∫\n"
                f"‚Ä¢ –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: `{settings['data_retention_days']}` –¥–Ω–µ–π\n\n"
                "_–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:_"
            )

            keyboard = [
                [InlineKeyboardButton(
                    f"üìù –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {settings['max_message_length']}",
                    callback_data='change_max_message_length'
                )],
                [InlineKeyboardButton(
                    f"üîç –ú–∞–∫—Å. –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {settings['max_keywords']}",
                    callback_data='change_max_keywords'
                )],
                [InlineKeyboardButton(
                    f"‚ö°Ô∏è –ü–æ—Ä–æ–≥ —Ñ–ª—É–¥–∞: {settings['flood_wait_threshold']} —Å–µ–∫",
                    callback_data='change_flood_wait_threshold'
                )],
                [InlineKeyboardButton(
                    f"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {settings['join_channel_delay']} —Å–µ–∫",
                    callback_data='change_join_channel_delay'
                )],
                [InlineKeyboardButton(
                    f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–∞: {settings['retry_interval']} —Å–µ–∫",
                    callback_data='change_retry_interval'
                )],
                [InlineKeyboardButton(
                    f"üßπ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏: {settings['cleanup_interval']} —Å–µ–∫",
                    callback_data='change_cleanup_interval'
                )],
                [InlineKeyboardButton(
                    f"üìÖ –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {settings['data_retention_days']} –¥–Ω–µ–π",
                    callback_data='change_data_retention_days'
                )],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='monitor_settings')]
            ]

            await query.edit_message_text(
                text=message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
            return STATES['EDITING_OTHER']

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—á–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='monitor_settings')
                ]]),
                parse_mode='Markdown'
            )
            return STATES['SETTINGS_MENU']

    async def edit_timeouts(self, query: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            settings = load_settings()
            
            keyboard = [
                [InlineKeyboardButton(
                    f"‚è≥ –¢–∞–π–º-–∞—É—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {settings.get('join_timeout', 30)} —Å–µ–∫",
                    callback_data='change_join_timeout'
                )],
                [InlineKeyboardButton(
                    f"‚åõÔ∏è –¢–∞–π–º-–∞—É—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {settings['message_processing_timeout']} —Å–µ–∫",
                    callback_data='change_message_timeout'
                )],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='monitor_settings')]
            ]
            
            await query.edit_message_text(
                "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º-–∞—É—Ç–æ–≤*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n"
                "‚Ä¢ *–¢–∞–π–º-–∞—É—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è* - –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –≤ –∫–∞–Ω–∞–ª\n"
                "‚Ä¢ *–¢–∞–π–º-–∞—É—Ç —Å–æ–æ–±—â–µ–Ω–∏–π* - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
            return STATES['EDITING_TIMEOUTS']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–π–º-–∞—É—Ç–æ–≤: {e}")
            return await self.show_monitor_menu(query, context)

    async def edit_notifications(self, query: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            from ..config import load_settings
            settings = load_settings()
            
            keyboard = [
                [InlineKeyboardButton(
                    f"–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: {settings['notification_chunk_size']}",
                    callback_data='change_notification_chunk_size'
                )],
                [InlineKeyboardButton(
                    f"–¢–∞–π–º–∞—É—Ç: {settings['message_processing_timeout']} —Å–µ–∫",
                    callback_data='change_message_processing_timeout'
                )],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='monitor_settings')]
            ]
            
            await query.edit_message_text(
                "üì± *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
            return STATES['EDITING_NOTIFICATIONS']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return await self.show_monitor_menu(query, context)

    async def save_setting_value(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            setting_type = context.user_data.get('editing_setting')
            if not setting_type:
                return await self.show_settings_menu(update, context)
                    
            value = update.message.text.strip()

            try:
                value = int(value)
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                    parse_mode='Markdown'
                )
                return STATES['ENTERING_VALUE']
                    
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
            ranges = {
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                'check_interval': (1, 60),                    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
                'max_channels_per_client': (100, 1000),       # –ú–∞–∫—Å–∏–º—É–º –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                'notification_chunk_size': (10, 100),         # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                'message_processing_timeout': (10, 120),      # –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–µ–∫—É–Ω–¥—ã)
                
                # –¢–∞–π–º-–∞—É—Ç—ã –∏ –∑–∞–¥–µ—Ä–∂–∫–∏
                'join_timeout': (10, 300),                    # –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª (—Å–µ–∫—É–Ω–¥—ã)
                'join_channel_delay': (1, 30),                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
                'retry_interval': (60, 600),                  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (—Å–µ–∫—É–Ω–¥—ã)
                'restart_delay': (30, 300),                   # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º (—Å–µ–∫—É–Ω–¥—ã)
                
                # –õ–∏–º–∏—Ç—ã –∏ –ø–æ—Ä–æ–≥–∏
                'max_message_length': (1000, 10000),          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                'max_keywords': (100, 10000),                 # –ú–∞–∫—Å–∏–º—É–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                'max_errors_before_restart': (1, 20),         # –ú–∞–∫—Å–∏–º—É–º –æ—à–∏–±–æ–∫ –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                'flood_wait_threshold': (30, 300),            # –ü–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–ª—É–¥–∞ (—Å–µ–∫—É–Ω–¥—ã)
                
                # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
                'cleanup_interval': (3600, 86400),            # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏ (—Å–µ–∫—É–Ω–¥—ã, –æ—Ç 1 —á–∞—Å–∞ –¥–æ 1 –¥–Ω—è)
                'data_retention_days': (1, 90),               # –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–¥–Ω–∏)
            }
            
            valid_range = ranges.get(setting_type)
            if valid_range and not (valid_range[0] <= value <= valid_range[1]):
                await update.message.reply_text(
                    f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {valid_range[0]} –¥–æ {valid_range[1]}!\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                    parse_mode='Markdown'
                )
                return STATES['ENTERING_VALUE']
                    
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = load_settings()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            old_value = settings.get(setting_type)
            settings[setting_type] = value
            
            if save_settings(settings):
                success_message = (
                    f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
                    f"–ü–∞—Ä–∞–º–µ—Ç—Ä: `{setting_type}`\n"
                    f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `{old_value}`\n"
                    f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `{value}`\n\n"
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫..."
                )
                
                await update.message.reply_text(success_message, parse_mode='Markdown')
                await asyncio.sleep(2)
                
                class FakeCallback:
                    def __init__(self, message):
                        self.message = message
                    async def edit_message_text(self, *args, **kwargs):
                        return await self.message.reply_text(*args, **kwargs)

                fake_query = FakeCallback(update.message)
                return await self.show_settings_menu(fake_query, context)
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode='Markdown'
                )
                    
            return STATES['SETTINGS_MENU']
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='Markdown'
            )
            class FakeCallback:
                def __init__(self, message):
                    self.message = message
                async def edit_message_text(self, *args, **kwargs):
                    return await self.message.reply_text(*args, **kwargs)

            fake_query = FakeCallback(update.message)
            return await self.show_settings_menu(fake_query, context)

    async def start_value_input(self, query: Update, context: ContextTypes.DEFAULT_TYPE, setting_type: str):
        try:
            context.user_data['editing_setting'] = setting_type
            
            setting_info = {
                'check_interval': {
                    'name': '–∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏',
                    'description': '–≤ —Å–µ–∫—É–Ω–¥–∞—Ö',
                    'range': '1-60'
                },
                'max_channels_per_client': {
                    'name': '–∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç',
                    'description': '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                    'range': '100-1000'
                },
                'notification_chunk_size': {
                    'name': '—Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                    'description': '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π',
                    'range': '10-100'
                },
                'message_processing_timeout': {
                    'name': '—Ç–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                    'description': '–≤ —Å–µ–∫—É–Ω–¥–∞—Ö',
                    'range': '10-120'
                }
            }

            info = setting_info.get(setting_type, {
                'name': setting_type,
                'description': '',
                'range': '—á–∏—Å–ª–æ'
            })

            await query.edit_message_text(
                f"‚öôÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:* {info['name']}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ({info['description']})\n"
                f"–î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {info['range']}\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data='monitor_settings')
                ]])
            )
            
            return STATES['ENTERING_VALUE']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return await self.show_settings_menu(query, context)


    async def toggle_monitoring(self, query: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            is_active = self.monitor.is_monitoring
            
            if is_active:
                await self.monitor.stop_monitoring()
                self.start_time = None
            else:
                await self.monitor.initialize_clients()
                await self.monitor.start_monitoring()
                self.start_time = datetime.now()

            stats = self.monitor.get_stats()
            status_emoji = "üü¢" if stats['status'] == '–ê–∫—Ç–∏–≤–µ–Ω' else "üî¥"
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            uptime = '0:00:00'
            if self.start_time and stats['status'] == '–ê–∫—Ç–∏–≤–µ–Ω':
                uptime = str(datetime.now() - self.start_time).split('.')[0]

            keyboard = [
                [InlineKeyboardButton(
                    "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if stats['status'] == '–ê–∫—Ç–∏–≤–µ–Ω' else "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å",
                    callback_data='toggle_monitoring'
                )],
                [
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data='add_channel'),
                    InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data='list_channels')
                ],
                [
                    InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏", callback_data='manage_accounts'),
                ],
                [
                    InlineKeyboardButton("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏", callback_data='manage_proxies'),
                ],
                [
                    InlineKeyboardButton("üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data='manage_keywords'),
                ],
                [
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='monitor_settings')
                ]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)
            message = (
                f"*–ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status_emoji} {stats['status']}\n"
                f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['messages_processed']}\n"
                f"–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {stats['keywords_found']}\n"
                f"–û—à–∏–±–æ–∫: {stats['errors']}\n"
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['active_clients']}\n"
                f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats['watched_channels']}\n"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
                
            return STATES['MONITORING']
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')
                ]])
            )
            return STATES['MONITORING']

    async def edit_autorestart(self, query: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            settings = load_settings()
            
            keyboard = [
                [InlineKeyboardButton(
                    f"–ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: {'–í–∫–ª—é—á–µ–Ω' if settings['auto_restart'] else '–í—ã–∫–ª—é—á–µ–Ω'}", 
                    callback_data='toggle_autorestart'
                )],
                [InlineKeyboardButton(
                    f"–ó–∞–¥–µ—Ä–∂–∫–∞: {settings['restart_delay']} —Å–µ–∫",
                    callback_data='change_restart_delay'
                )],
                [InlineKeyboardButton(
                    f"–ú–∞–∫—Å. –æ—à–∏–±–æ–∫: {settings['max_errors_before_restart']}",
                    callback_data='change_max_errors'
                )],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='monitor_settings')]
            ]
            
            await query.edit_message_text(
                "üîÑ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
            return STATES['EDITING_AUTORESTART']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
            return await self.show_monitor_menu(query, context)

    async def start_channel_addition(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        try:
            if not update.callback_query:
                return STATES['MONITORING']
            
            query = update.callback_query
            await query.answer()
            
            message = (
                "*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ `https://t.me/channel_name`\n"
                "‚Ä¢ `@channel_name`\n"
                "‚Ä¢ `https://t.me/+abcdef...` (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)\n\n"
                "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
            )
            
            keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            context.user_data['state'] = STATES['ADDING_CHANNEL']
            return STATES['ADDING_CHANNEL']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            if update.callback_query:
                await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                try:
                    await update.callback_query.edit_message_text(
                        text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')
                        ]]),
                        parse_mode='Markdown'
                    )
                except Exception:
                    pass
            return STATES['MONITORING']

    async def add_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

            try:
                message_text = update.message.text
                channel_links = [link.strip() for link in message_text.split('\n') if link.strip()]

                status_message = await update.message.reply_text(
                    "üîÑ *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–∞–Ω–∞–ª–æ–≤*\n\n"
                    f"üìã –ö–∞–Ω–∞–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: `{len(channel_links)}`\n"
                    "‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...\n\n"
                    "_üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º_",
                    parse_mode='Markdown'
                )

                await self.show_monitor_menu(update, context)
                asyncio.create_task(
                    self._process_channels_background(
                        channel_links,
                        status_message,
                        update.message.chat_id
                    )
                )

                return STATES['MONITORING']

            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
                await update.message.reply_text(
                    "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤*",
                    parse_mode='Markdown'
                )
                return STATES['MONITORING']

    async def _process_channels_background(self, channel_links: List[str], status_message, chat_id: int):
        """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            async def update_status(text: str):
                try:
                    await status_message.edit_text(
                        text + "\n\n" +
                        "_üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, "
                        "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ_",
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

            added, errors = await self.channel_handler.process_channel_addition(
                channel_links,
                update_status
            )

            # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            final_message = (
                "‚úÖ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ*\n\n"
                f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ: `{added}`\n"
                f"‚ùå –û—à–∏–±–æ–∫: `{len(errors)}`\n"
            )

            if errors:
                final_message += "\n*–û—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:*\n"
                final_message += "\n".join(f"‚Ä¢ {error}" for error in errors)

            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_monitor")]]
            
            if hasattr(self.monitor, 'bot') and hasattr(self.monitor.bot, 'bot'):
                bot = self.monitor.bot.bot
            else:
                bot = self.monitor.bot

            await bot.send_message(
                chat_id=chat_id,
                text=final_message,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
            if hasattr(self.monitor, 'bot') and hasattr(self.monitor.bot, 'bot'):
                bot = self.monitor.bot.bot
            else:
                bot = self.monitor.bot

            await bot.send_message(
                chat_id=chat_id,
                text="‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤*\n\n"
                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ–∑–∂–µ –∏–ª–∏ –º–µ–Ω—å—à–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_monitor")
                ]])
            )
            
    async def list_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            channels = await self.monitor.db.load_channels()
            query = update if not hasattr(update, 'callback_query') else update.callback_query
            
            if hasattr(update, 'callback_query'):
                await query.answer()

            if not channels:
                message_text = "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç\n\n–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'"
                keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_monitor")]]
            else:
                message_text = f"üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\nüìà –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}\n\n"

                for i, channel in enumerate(channels, 1):
                    title = channel.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    username = channel.get('username', '')
                    message_text += f"{i}. {title}\n"
                    if username:
                        message_text += f"    @{username}\n"
                    message_text += "\n"

                keyboard = [
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
                    [InlineKeyboardButton("üóë –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø", callback_data="delete_channels_menu")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_monitor")]
                ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            if hasattr(update, 'callback_query'):
                await query.edit_message_text(
                    text=message_text,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    text=message_text,
                    reply_markup=reply_markup
                )

            return STATES['MONITORING']

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return await self.show_error(update, "–ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")


    async def manage_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
        try:
            query = update.callback_query
            await query.answer()

            channels = await self.monitor.db.load_channels()
            
            manage_page = context.user_data.get('manage_channels_page', 0)
            items_per_page = 5  # –ú–µ–Ω—å—à–µ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            total_pages = (len(channels) - 1) // items_per_page + 1
            
            start_idx = manage_page * items_per_page
            end_idx = start_idx + items_per_page
            current_channels = channels[start_idx:end_idx]

            message_text = (
                "üóë *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏*\n"
                f"üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ {manage_page + 1} –∏–∑ {total_pages}\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
            )

            keyboard = []
            
            for channel in current_channels:
                title = channel.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                chat_id = channel.get('chat_id')
                keyboard.append([
                    InlineKeyboardButton(
                        f"üóë {title[:30]}{'...' if len(title) > 30 else ''}", 
                        callback_data=f"delete_channel_{chat_id}"
                    )
                ])

            nav_buttons = []
            if total_pages > 1:
                if manage_page > 0:
                    nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="prev_manage_page"))
                nav_buttons.append(InlineKeyboardButton(f"{manage_page + 1}/{total_pages}", callback_data="current_manage_page"))
                if manage_page < total_pages - 1:
                    nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data="next_manage_page"))
                keyboard.append(nav_buttons)

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="confirm_delete_all")])
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_channels")])
            
            await query.edit_message_text(
                text=message_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

            return STATES['MANAGING_CHANNELS']

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏: {e}")
            return await self.show_error(update, "–æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

    async def handle_channels_navigation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
        try:
            query = update.callback_query
            await query.answer()

            action = query.data
            
            if 'manage' in action:
                current_page = context.user_data.get('manage_channels_page', 0)
                if action == 'prev_manage_page':
                    context.user_data['manage_channels_page'] = max(0, current_page - 1)
                elif action == 'next_manage_page':
                    context.user_data['manage_channels_page'] = current_page + 1
                return await self.manage_channels(update, context)
            else:
                current_page = context.user_data.get('channels_page', 0)
                if action == 'prev_channels_page':
                    context.user_data['channels_page'] = max(0, current_page - 1)
                elif action == 'next_channels_page':
                    context.user_data['channels_page'] = current_page + 1
                return await self.list_channels(update, context)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            return await self.show_error(update, "–Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

    async def delete_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
        try:
            query = update.callback_query
            await query.answer()
            
            channel_id = int(query.data.replace('delete_channel_', ''))
            success = await self.monitor.remove_channel(channel_id)
            
            if success:
                await query.answer("‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")

            return await self.manage_channels(update, context)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            return await self.show_error(update, "—É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not context.user_data.get('state'):
                return STATES['MONITORING']

            current_state = context.user_data['state']
            
            if current_state == STATES['ADDING_CHANNEL']:
                return await self.add_channel(update, context)

            return STATES['MONITORING']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é /cancel"
            )
            return STATES['MONITORING']

    async def check_channels(self, query: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            await query.edit_message_text("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤...")
            results = await self.monitor.check_channels()
            
            message = "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:*\n\n"
            for channel, is_available in results.items():
                status = "üü¢" if is_available else "üî¥"
                message += f"{status} {channel}\n"

            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data='check_channels')],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return STATES['MONITORING']
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–æ–≤")
            return STATES['MONITORING']

    async def show_detailed_stats(self, query: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            stats = self.monitor.get_stats()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            if stats['messages_processed'] > 0:
                finds_percent = (stats['keywords_found'] / stats['messages_processed']) * 100
                errors_percent = (stats['errors'] / stats['messages_processed']) * 100
            else:
                finds_percent = 0
                errors_percent = 0
            
            message = (
                "üìä *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
                f"üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats.get('uptime', '0:00:00')}\n"
                f"üì• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['messages_processed']}\n"
                f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {stats['keywords_found']}\n"
                f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {stats['errors']}\n"
                f"üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {stats['active_clients']}\n"
                f"üì¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã: {stats['watched_channels']}\n\n"
                f"üìà *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ö–æ–¥–æ–∫: {finds_percent:.2f}%\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫ –Ω–∞ 100 —Å–æ–æ–±—â–µ–Ω–∏–π: {errors_percent:.2f}"
            )

            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='monitor_stats')],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return STATES['MONITORING']
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return STATES['MONITORING']

    async def show_settings(self, query: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            message = (
                "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*\n\n"
                "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã\n"
                "üïí –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: 1 —Å–µ–∫\n"
                "üìù –§–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π\n"
                "üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: –í–∫–ª—é—á–µ–Ω\n\n"
                "_–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏_"
            )

            keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return STATES['MONITORING']
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return STATES['MONITORING']

    async def remove_channel(self, query: Update, context: ContextTypes.DEFAULT_TYPE, channel: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            success = await self.monitor.remove_channel(channel)
            
            if success:
                message = f"‚úÖ –ö–∞–Ω–∞–ª {channel} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
            else:
                message = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª {channel}"

            await query.edit_message_text(message)
            await asyncio.sleep(2)
            return await self.list_channels(query, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
            return STATES['MONITORING']

    def get_handlers(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        return [
            self.show_monitor_menu,          # –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.handle_monitor_callback,     # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤
            self.start_channel_addition,      # –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            self.add_channel,                 # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            self.list_channels,               # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
            self.check_channels,              # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
            self.show_detailed_stats,         # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.show_settings,               # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            self.remove_channel,              # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            self.toggle_monitoring,           # –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.show_delete_channels_menu,   # –ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
            self.delete_single_channel,       # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            self.delete_all_channels,         # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
            self.confirm_delete_all_channels  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö
        ]
        
class AccountHandler:
    async def show_accounts_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
        try:
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data='add_account')],
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='list_accounts')],
                [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ", callback_data='remove_invalid')],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_monitor')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message = (
                "üë§ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏*\n\n"

            )
            
            if update.callback_query:
                try:
                    await update.callback_query.edit_message_text(
                        message,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                except telegram.error.BadRequest as e:
                    if "Message is not modified" not in str(e):
                        raise e
            else:
                await update.message.reply_text(
                    message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
            return STATES['MANAGING_ACCOUNTS']
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return STATES['MANAGING_ACCOUNTS']